{
    "Timestamp": "1/22/2020 2:38:10",
    "Title": "Frame Fields: Anisotropic and Non-Orthogonal Cross Fields",
    "DOI": "10.1145/2601097.2601179",
    "PDF availability (beside dl.acm)": "On the author(s) website or its institution",
    "Is the code or software publicly available ?": "Yes",
    "Availability": "on the authors website or project page (zip file, direct download...), on github, gitlab or other code platform",
    "Main languages": "C/C++",
    "How long did take for you to evaluate the code this paper (if any)?": 10,
    "Build info / instructions": "None",
    "arXiv (page URL)": "",
    "code URL": "http://vcg.isti.cnr.it/Publications/2014/PPTS14/source-code.zip",
    "code URL  2": "https://github.com/libigl",
    "PDF URL": "http://vcg.isti.cnr.it/Publications/2014/PPTS14/frame-fields.pdf",
    "License type": "unspecified",
    "Build mechanism": "None",
    "Mandatory Software dependencies": "Open-source libraries",
    "Feedback [easy deps]": "",
    "Feedbacks [easy to find/install dependencies  (5=easy)]": 2,
    "Feedbacks [easy to configure/build (5=easy)]": 2,
    "Feedbacks [easy to fix bugs (5=easy N/A if no bug)]": 2,
    "Execution experience [Row 1]": "",
    "Does the code need data (other than examples/inputs) ?": "No",
    "Available data (provided or url / ref)": "",
    "License for the data (if any)": "",
    "Feedbacks [easy to adapt / use in other contexts (5=easy)]": 3,
    "Feedbacks [Interface user-friendly (5=easy)]": 5,
    "Documentation": "Technical documentation (comments-doxygen...)",
    "Authors": "Academia",
    "ACM 1": "Parametric curve and surface models",
    "ACM 2": "Volumetric models",
    "Feedbacks [if matlab does it run on OSS alternatives (5=easy)]": "N/A",
    "OS of the test": "Windows",
    "General comments": "The code provided on the project website consists in a single downloadable main.cpp file. It is unclear if the core implementation is in libigl (mentioned in the includes) or in the main.cpp. To make the main compile, it has to be updated since it relies on a very old libigl :\n- replace #include <igl/viewer/Viewer.h> by #include <igl/opengl/glfw/Viewer.h>\n- replace #include <igl/comiso/nrosy.h>,  <igl/comiso/miq.h> and <igl/comiso/frame_field.h> by #include <igl/copyleft/comiso/nrosy.h>,  <igl/copyleft/comiso/miq.h>, and <igl/copyleft/comiso/frame_field.h>\n- replace igl::Viewer& viewer by igl::opengl::glfw::Viewer& viewer in key_down(..)\n- replace igl::Viewer viewer; by igl::opengl::glfw::Viewer viewer; in main()\n- replace all viewer.data. by viewer.data(). (24 times)\n- replace viewer.core.show_lines by viewer.data().show_lines \n- replace viewer.core.show_texture by viewer.data().show_texture\n- replace igl::nrosy, igl::miq and igl::frame_field  by igl::copyleft::comiso::nrosy, igl::copyleft::comiso::miq and igl::copyleft::comiso::frame_field\n- replace Eigen::Matrix<char,Eigen::Dynamic,Eigen::Dynamic> texture_R, texture_G, texture_B; by Eigen::Matrix<unsigned char,Eigen::Dynamic,Eigen::Dynamic> texture_R, texture_G, texture_B; (otherwise you get an YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY error in Eigen) ; you similarly need to change the parameters of line_texture by replacing char with unsigned char.\n- add #include <igl/local_basis.h> and #include <igl/rotate_vectors.h>\n- *** IGL bug *** : in igl/grad.cpp, in lines 226 and 228, grad_tri and grad_tet should be replaced by igl::grad_tri and igl::grad_tet since they are outside of the namespace.\nSince no CMakeList is given, you need to add the following preprocessor directives (tested on Visual Studio 2017) :\n- EIGEN_NO_DEPRECATED_WARNING; since Eigen::DynamicSparseMatrix is deprecated (and might just not work in the near future)\n- _CRT_SECURE_NO_WARNINGS; _SCL_SECURE_NO_DEPRECATE ; IGL_STATIC_LIBRARY (to prevent linking issues with Comiso), _USE_MATH_DEFINES\n- the blas shipped with Eigen should be compiled and linked to the project (it compiles smoothly with the provided CMakeList).\n- my list of linked libraries looks like: igl_opengl_glfw.lib;igl_opengl.lib;igl.lib;comiso.lib;igl_comiso.lib;eigen_blas_static.lib;glad.lib;glfw3.lib\n- I had to compile it in Multithread (MT), not the default Multithread DLL, due to the way igl is compiled by default (it seems).\nUltimately, I managed to run the provided example. The data is shipped with the IGL tutorial data. This is the only object provided with constraints stored as a dmat file (how can I generate one ?). All the figure results are provided in a separate archive, but without the constraint file, I cannot test whether it works.\nI also couldn't get the cross frame to render like in the paper : part of the shape show cross frames over a red mesh (by pressing '1'), but part of the shape remains white with no frames. This might be due to the char -> unsigned char bug fix (?).",
    "Does the paper already have a reproducibility stamp": "No",
    "Citation count (google scholar)": 58,
    "List of the required dependencies (if any, \"/\" separated, ex: matlab, libpng,cgal...)": "libigl / comiso / eigen / glad / glfw /",
    "Project URL": "http://vcg.isti.cnr.it/Publications/2014/PPTS14/",
    "Did I manage to perform a complete test (deps/build)?": "Yes",
    "Year": 2014,
    "Misc. comment": "",
    "Software Type": "Code",
    "Topic": "Geometry",
    "Deep learning": "False",
    "hasThumbnail": true,
    "Open access": false,
    "Feedbacks [could reproduce results (5=highly confident)]": 3,
    "Could paper be trivially implemented using the pseudo-code": "",
    "Reviewer": 2,
    "Documentation score": 1,
    "Paper authors": [
        {
            "given": "Daniele",
            "family": "Panozzo",
            "sequence": "first",
            "affiliation": []
        },
        {
            "given": "Enrico",
            "family": "Puppo",
            "sequence": "additional",
            "affiliation": []
        },
        {
            "given": "Marco",
            "family": "Tarini",
            "sequence": "additional",
            "affiliation": []
        },
        {
            "given": "Olga",
            "family": "Sorkine-Hornung",
            "sequence": "additional",
            "affiliation": []
        }
    ],
    "Altmetric score": 0,
    "Altmetric badge": 0,
    "Altmetric url": 0
}