{
    "Timestamp": "12/27/2019 22:31:44",
    "Title": "Compact Precomputed Voxelized Shadows",
    "DOI": "10.1145/2601097.2601221",
    "PDF availability (beside dl.acm)": "On the author(s) website or its institution",
    "Is the code or software publicly available ?": "Yes",
    "Availability": "on the authors website or project page (zip file, direct download...)",
    "Main languages": "C/C++",
    "How long did take for you to evaluate the code this paper (if any)?": 10,
    "Build info / instructions": "README",
    "arXiv (page URL)": "",
    "code URL": "http://www.cse.chalmers.se/~d00sint/CPVS/CPVSStandalone.zip",
    "code URL  2": "",
    "PDF URL": "http://www.cse.chalmers.se/~d00sint/CompressedShadowsPreprint.pdf",
    "License type": "unspecified",
    "Build mechanism": "IDE Project (VS,..)",
    "Mandatory Software dependencies": "Open-source libraries, Closed source (e.g. commercial) software or libraries free for research purposes",
    "Feedback [easy deps]": "",
    "Feedbacks [easy to find/install dependencies  (5=easy)]": 3,
    "Feedbacks [easy to configure/build (5=easy)]": 3,
    "Feedbacks [easy to fix bugs (5=easy N/A if no bug)]": 2,
    "Execution experience [Row 1]": "",
    "Does the code need data (other than examples/inputs) ?": "No",
    "Available data (provided or url / ref)": "",
    "License for the data (if any)": "",
    "Feedbacks [easy to adapt / use in other contexts (5=easy)]": 5,
    "Feedbacks [Interface user-friendly (5=easy)]": 5,
    "Documentation": "User-documentation (readme-note-tutorial) more than just build instructions, API documentation, Technical documentation (comments-doxygen...)",
    "Authors": "Academia",
    "ACM 1": "Texturing",
    "Feedbacks [if matlab does it run on OSS alternatives (5=easy)]": "N/A",
    "OS of the test": "Windows",
    "General comments": "I compile the code with VS2017 and Cuda 10.2, which is quite far from the original project settings (VS2014 6.5). Step by step:\n- You need to edit the CPVS2014.vcxproj, replacing at line 55 <Import Project=\"$(VCTargetsPath)\\BuildCustomizations\\CUDA 6.5.props\" /> by the place where you have your Cuda 10 property sheets (in my case \"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\extras\\visual_studio_integration\\MSBuildExtensions\\CUDA 10.2.props\"). And similarly in line 185 for the Cuda targets (same folder). And then open the project with visual studio, update/retarget the project file.\n- You need to use a fresh wxWidget, since the one provided is precompiled for VS2014. Go to https://www.wxwidgets.org/downloads/ and download the precompiled binaries for windows (headers and release DLLs). Replace the original wxWidget folder with these downloads (same fold hierarchy).\n- add wxMSVC_VERSION=14x as a preprocessor directive for the projects CHAGApp and CPVS2014 and remove wxMSVC_VERSION_AUTO\n- replace compute_20,sm_20 in Cuda C/C++->Device->Code Generation to compute_30,sm_30 in the project CPVS2014\n- add #include <intrin.h> in CompressedShadow.cpp\n- Change WINVER=0x0400 to WINVER=0x0500 in the preprocessor directives of CHAGApp and CPVS2014\n- Change the library path ../wxWidgets/lib/vc120_x64_dll  to ../wxWidgets/lib/vc14x_x64_dll\n- Change the libraries being linked from wxmsw30u_core.lib and wxbase30u.lib to wxmsw31u_core.lib and wxbase31u.lib\n- In line 115 of GLSLProgramManager.cpp, replace return shader; by return \"#version 420 compatibility\\n\"+shader;  This is quite a hack, but works in my case. Remove *all* mentions of #version 400 or 420 in all shader files (Application.glsl, CPVSBuilder.glsl, Scene.glsl) since you are now only allowed a single call to \"#version\" in the first line of the shader.\n- Compile the code, and put the .exe and the wxWidgets dll in the CPVS2014 folder (where there is a subfolder \"media\").\nYou can now launch the .exe and play with it. There is a very nice Readme.pdf that gives step by step instructions to compress shadow maps. I lowered the reproducibility score for the main reason that the proposed implementation differs from what is explained in the paper (the Readme.pdf explains the differences), and for the secondary reason that the scene files used in the paper are not provided, so it is difficult to appreciate the differences between the new and original implementation in term of results. However, the code works well and shows crisp shadows.",
    "Does the paper already have a reproducibility stamp": "No",
    "Citation count (google scholar)": 31,
    "List of the required dependencies (if any, \"/\" separated, ex: matlab, libpng,cgal...)": "cuda / embree / glew / glut / wxWidgets",
    "Project URL": "",
    "Did I manage to perform a complete test (deps/build)?": "Yes",
    "Year": 2014,
    "Misc. comment": "",
    "Software Type": "Code",
    "Topic": "Rendering",
    "Deep learning": "False",
    "hasThumbnail": true,
    "Open access": false,
    "Feedbacks [could reproduce results (5=highly confident)]": 3,
    "Could paper be trivially implemented using the pseudo-code": "",
    "Reviewer": 2,
    "Documentation score": 2,
    "Paper authors": [
        {
            "given": "Erik",
            "family": "Sintorn",
            "sequence": "first",
            "affiliation": []
        },
        {
            "given": "Viktor",
            "family": "K\u00e4mpe",
            "sequence": "additional",
            "affiliation": []
        },
        {
            "given": "Ola",
            "family": "Olsson",
            "sequence": "additional",
            "affiliation": []
        },
        {
            "given": "Ulf",
            "family": "Assarsson",
            "sequence": "additional",
            "affiliation": []
        }
    ],
    "Altmetric score": 1,
    "Altmetric badge": "https://badges.altmetric.com/?size=64&score=1&types=tttttttt",
    "Altmetric url": "http://www.altmetric.com/details.php?citation_id=2598119"
}